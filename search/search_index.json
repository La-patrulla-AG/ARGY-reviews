{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>El proposito general de esta documentacion es guiar al desarrollador para poder levantar la aplicacion web de Argy Reviews. A continuacion se otorgaran varios metodos para poder realizar esto con exito.</p> <p>Antes que nada se debe clonar la rama principal del repositorio de Argy Reviews. <pre><code>git clone https://github.com/La-patrulla-AG/ARGY-reviews.git\n</code></pre></p>"},{"location":"#levantar-con-docker-compose","title":"Levantar con docker-compose","text":"<p>La forma mas sencilla y rapida de levantar el proyecto es a traves de Docker. Las configuraciones necesarias fueron hechas de ante mano para que el proyecto sea funcional con tan solo un solo comando de la consola. </p> <p>El unico requerimiento para procede es tener instalado Docker desktop o algun motor de Docker en la pc.Una ves que Docker exista en su computadora, este debera estar encendido y corriendo. </p> <p>Ejecutando el siguiente comando en la ra\u00edz del proyecto (donde se encuentra el archivo <code>docker-compose.yml</code>) se crearan las imagenes con todas las dependencias correspondientes y se levantaran un contendor con estas corriendo. <pre><code>docker-compose up --build\n</code></pre> </p>"},{"location":"#dependencias-locales","title":"Dependencias locales","text":"<p>Si desea instalar todos los requerimientos de manera local estos son los pasos a seguir.</p>"},{"location":"#django","title":"Django","text":"<p>Se intuye que Python esta instalado localmente.</p> <p>Para poder utilizar Django y levantar el servidor con todos los servicios que este ofrece primero debemos tener <code>Django</code> instalado localmente y todas la dependencias que este incluye tales como <code>rest-framework</code>. Afortunadamente esto esta facilitado a traves de el <code>venv</code>, que nos permiten virtualizar todas las dependencias necesarias solamente para este proyecto.</p> <p>venv y .gitignore</p> <p>La carpeta de <code>venv</code> es solamente propia del desarrollador; por nada deben commitearse los cambios dentro de esta carpeta o pushearse al repositorio remoto. Por esta razon existe un <code>.gitignore</code> que evita que los cambios en esta area sea agregen a stage (o se deban estar excluyendo y seleccionando uno por uno).</p> <p>Para poder utilizar <code>venv</code> e instalar todas las dependencias debemos levantar el entorno virtual e instalar todos los requerimientos detallado en <code>requirements.txt</code>. A continuacion una breve guia para hacerlo:</p> <ol> <li>Instala venv para poder utilizar el entorno virtual. <pre><code>pip install virtualenv\n</code></pre></li> <li>Creamos el entorno virtual. <pre><code>python -m venv venv\n</code></pre></li> <li>Activamos el entorno virtual (debe encontrarse dentro del directorio donde <code>venv</code> se encuentra). <pre><code>venv\\Scripts\\activate\n</code></pre></li> <li>Instalamos las dependencias. Esto lo haremos a traves de <code>requirements.txt</code>, donde estan <pre><code>pip install -r requirements.txt\n</code></pre></li> </ol> <p>Si en algun momento se agregan dependencias al proyecto y se desea actualizar los requerimientos utilize: <pre><code>pip freeze &gt; requirements.txt\n</code></pre></p> <p>Warning</p> <p>Puede que el sistema no tenga habilitada la ejecucion de scripts. Para solucionarlo ebes abrir PowerShell con privilegios de administrador y cambiar la politica de ejecucion. <pre><code>Set-ExecutionPolicy RemoteSigned\n</code></pre></p>"},{"location":"#frontend-setup","title":"Frontend setup","text":"<p><pre><code>winget install Schniz.fnm\nfnm env --use-on-cd | Out-String | Invoke-Expression \nfnm use --install-if-missing 20\n</code></pre> Ahora si reseteas la consola deberias poder usar npm, pero si no podes proba esto: <pre><code>Test-Path $PROFILE\nNew-Item -Path $PROFILE -Type File -Force\nnotepad $PROFILE\nfnm env --use-on-cd | Out-String | Invoke-Expression\n</code></pre></p>"},{"location":"#node-modules-step-by-step","title":"Node modules step by step","text":"<p>Desde el directorio <code>Argy-reviews\\argy-reviews\\frontend\\</code>: <pre><code>npm init -y\nnpm install\nnpm run dev\n</code></pre></p>"},{"location":"api/","title":"Guia para desarrollo de las interacciones","text":"<p>Este documento tiene como proposito guiar al desarrollador en la utilizacion del servicio REST que ofrece Argy Reviews. A continuacion se enunciaron los puntos clave para poder realizar correctamente las solicitudes.</p>"},{"location":"api/#funcionamiento-general-de-la-api","title":"Funcionamiento general de la API","text":"<p>El servicio consta de una url base para todos los endpoints de la aplicacion.</p> <p>La URL base sera <code>http://localhost:8000</code> en caso de estar utilizando la aplicacion localmente. En cambio, si se esta utilizando el servicio desde el dominio web, la URL base sera <code>https://argy-reviews-production.up.railway.app</code></p> <p>A continuacion se dara una lista de enpoints que se consideran indispensables para poder llevar a cabo las interaciones del proyecto.</p> <p>Cada uno de los puntos viene con una breve explicacion del funcionamiento general de la view, ejemplos en formato <code>json</code> de lo que se espera como <code>request</code> y que se espera como <code>response</code>una descripcion de cada metodo de cabezara HTTPS y la URL que se debera agregar a la URL base. </p> <p>Algunas de las views no seran necesarias dependiendo de como se haya planteado en primer lugar la interaccion. </p>"},{"location":"api/#publicaciones","title":"Publicaciones","text":"<p>Esta seccion tratara todas las views relacionadas con las publicaciones (<code>posts</code>). </p> GET <ul> <li>Descripcion Lista todas las publicaciones.</li> <li>Requiere autenticaci\u00f3n: No</li> </ul> <p>Este <code>json</code> es un ejemplo de lo que se obtendra como <code>response</code> al llamar alguno de los endpoints relacionados a las publicaciones. <pre><code>[\n    {\n    \"id\": 7,\n    \"title\": \"Una publicacion\",\n    \"content\": \"Un contenido de la publicacion\",\n    \"created_at\": \"2025-02-10T23:03:57.735353Z\",\n    \"code\": \"MGF1RITM\",\n    \"avg_ratings\": 2.1,\n    \"owner\": 1,\n    \"verification_state\": 1,\n    \"categories\": [\n        {\n            \"id\": 1,\n            \"name\": \"Tecnolog\u00eda\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"Servicios\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"Fitness\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"Restaurantes\"\n        }\n    },\n    {\n    \"id\": 8,\n    \"title\": \"Una publicacion\",\n    \"content\": \"Un contenido de la publicacion\",\n    \"created_at\": \"2025-02-10T23:03:57.735353Z\",\n    \"code\": \"MGF1RITM\",\n    \"avg_ratings\": 3.0,\n    \"owner\": 1,\n    \"verification_state\": 1,\n    \"categories\": [\n        {\n            \"id\": 1,\n            \"name\": \"Tecnolog\u00eda\"\n        }\n    ]\n    }\n]\n</code></pre></p> POST <ul> <li>Descripci\u00f3n: Crea una nueva publicacion.</li> <li>Requiere autenticaci\u00f3n: S\u00ed</li> </ul> <p>Los atributos minimos y necesarios para poder hacer una publicaci\u00f3n son: <pre><code>    {\n        \"title\": \"T\u00edtulo de la publicaci\u00f3n\",\n        \"description\": \"Descripci\u00f3n de la publicaci\u00f3n\",\n    }\n</code></pre> Atributos como <code>code</code>, <code>owner</code>, <code>verification_state</code>, <code>avg_rating</code>y <code>created_at</code> son generados autom\u00e1ticamente; <code>categories</code> es un atributo opcional que se utiliza para realizar filtros en la busqueda de publicaciones.</p> GET <ul> <li>Descripcion Recupera los detalles de una publicaci\u00f3n espec\u00edfica.</li> <li>Requiere autenticaci\u00f3n: No <pre><code>{\n    \"id\": 7,\n    \"title\": \"Una publicacion\",\n    \"content\": \"Un contenido de la publicacion\",\n    \"created_at\": \"2025-02-10T23:03:57.735353Z\",\n    \"code\": \"MGF1RITM\",\n    \"avg_ratings\": 0.0,\n    \"owner\": 1,\n    \"verification_state\": 1,\n    \"categories\": [\n        {\n            \"id\": 1,\n            \"name\": \"Tecnolog\u00eda\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"Servicios\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"Fitness\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"Restaurantes\"\n        }\n    ]\n}\n</code></pre></li> </ul> PUT <ul> <li>Descripci\u00f3n: Actualiza los detalles de una publicaci\u00f3n espec\u00edfica.</li> <li>Requiere autenticaci\u00f3n: S\u00ed</li> <li>Requiere ser owner: S\u00ed</li> </ul> <p>Es un metodo PUT, eso quiere decir que para actualizar una publicaci\u00f3n se debe enviar un <code>json</code> con todos los datos obligatorios de manera completa. </p> <pre><code>{\n    \"title\": \"T\u00edtulo de la publicaci\u00f3n\",\n    \"description\": \"Descripci\u00f3n de la publicaci\u00f3n\",\n}\n</code></pre> DELETE <ul> <li>Descripci\u00f3n: Elimina una publicaci\u00f3n espec\u00edfica.</li> <li>Requiere autenticaci\u00f3n: S\u00ed</li> <li>Requiere ser owner: S\u00ed</li> </ul> <p>Enviar la solicitud con el metodo en la cabecera bastara para eliminar la publicacion.</p>"},{"location":"api/#argy_reviews.api.views.post_list","title":"<code>post_list(request)</code>","text":"<p>List all posts or create a new post.</p> Source code in <code>argy_reviews\\api\\views.py</code> <pre><code>@api_view(['GET', 'POST'])\n@authentication_classes([CsrfExemptSessionAuthentication, JWTAuthentication])  \n@permission_classes([AllowAny])\ndef post_list(request):\n    \"\"\"\n    List all posts or create a new post.\n    \"\"\"\n\n    if request.method == 'GET':\n        posts = Post.objects.all()\n        serializer = PostSerializer(posts, many=True)\n        return Response(serializer.data)\n\n    elif request.method == 'POST':\n        if not request.user.is_authenticated:\n            return Response(status=status.HTTP_401_UNAUTHORIZED,)\n\n        permission = IsNotBanned()\n        if not permission.has_permission(request, None):\n            return Response({'detail': 'You are banned and cannot perform this action.'}, status=status.HTTP_403_FORBIDDEN)\n\n        serializer = PostSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save(verification_state=PostState.objects.get(name='verified'), owner=request.user)\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n</code></pre>"},{"location":"api/#argy_reviews.api.views.post_detail","title":"<code>post_detail(request, post_pk)</code>","text":"<p>Retrieve, update or delete a post.</p> Source code in <code>argy_reviews\\api\\views.py</code> <pre><code>@api_view(['GET', 'PUT', 'DELETE'])\n@authentication_classes([CsrfExemptSessionAuthentication, JWTAuthentication])  \n@permission_classes([AllowAny])\ndef post_detail(request, post_pk):\n    \"\"\"\n    Retrieve, update or delete a post.\n    \"\"\"\n    try:\n        post = Post.objects.get(pk=post_pk)\n    except Post.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n\n    if request.method == 'GET':\n        # Allows acceses to lecture without authentication\n        serializer = PostSerializer(post)\n        return Response(serializer.data)\n\n    elif request.method in ['PUT', 'DELETE']:\n        if not request.user.is_authenticated:\n            return Response(status=status.HTTP_401_UNAUTHORIZED)\n\n        if post.owner != request.user:\n            return Response(status=status.HTTP_403_FORBIDDEN)\n\n        if request.method == 'PUT':\n            serializer = PostSerializer(post, data=request.data)\n            if serializer.is_valid():\n                serializer.save()\n                return Response(serializer.data)\n            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n        elif request.method == 'DELETE':\n            post.delete()\n            return Response(status=status.HTTP_204_NO_CONTENT)\n</code></pre>"},{"location":"api/#resenas","title":"Rese\u00f1as","text":"<p>Esta seccion tratara todas las views relacionadas con las rese\u00f1as (<code>reviews</code>). </p> GET <ul> <li>Descripcion Lista todas las rese\u00f1as.</li> <li>Requiere autenticaci\u00f3n: No</li> </ul> <p>Este <code>json</code> es un ejemplo de lo que se obtendra como <code>response</code> al llamar alguno de los endpoints relacionados a las rese\u00f1as. <pre><code>[\n    {\n        \"id\": 16,\n        \"code\": \"S50EKE88\",\n        \"comment\": \"Buenas publicacion!\",\n        \"created_at\": \"2025-02-11T01:55:01.114071Z\",\n        \"rating\": 5,\n        \"owner\": 1\n    },\n    {\n        \"id\": 18,\n        \"code\": \"MZ9FMN95\",\n        \"comment\": \"Maso menos.\",\n        \"created_at\": \"2025-02-11T01:55:38.862715Z\",\n        \"rating\": 3,\n        \"owner\": 2\n    },\n    {\n        \"id\": 17,\n        \"code\": \"J58UQOFV\",\n        \"comment\": \"Muy mal!\",\n        \"created_at\": \"2025-02-11T01:55:21.622624Z\",\n        \"rating\": 1,\n        \"owner\": 3\n    }\n]\n</code></pre></p> POST <ul> <li>Descripci\u00f3n: Crea una nueva rese\u00f1a.</li> <li>Requiere autenticaci\u00f3n: S\u00ed</li> </ul> <p>Los atributos minimos y necesarios para poder hacer una rese\u00f1a son: <pre><code>    {\n        \"comment\": \"Comentario\",\n        \"rating\": 3\n    }\n</code></pre> El atributo <code>rating</code> es un valor entre 1 y 5, este debe ser entero.</p> GET <ul> <li>Descripcion Recupera los detalles de una rese\u00f1a espec\u00edfica.</li> <li>Requiere autenticaci\u00f3n: No <pre><code>{\n    \"id\": 18,\n    \"code\": \"MZ9FMN95\",\n    \"comment\": \"Maso menos.\",\n    \"created_at\": \"2025-02-11T01:55:38.862715Z\",\n    \"rating\": 3,\n    \"owner\": 2\n}\n</code></pre></li> </ul> PUT <ul> <li>Descripci\u00f3n: Actualiza los detalles de una publicaci\u00f3n espec\u00edfica.</li> <li>Requiere autenticaci\u00f3n: S\u00ed</li> <li>Requiere ser owner: S\u00ed</li> </ul> <p>Es un metodo PUT, eso quiere decir que para actualizar una publicaci\u00f3n se debe enviar un <code>json</code> con todos los datos obligatorios de manera completa. </p> <p><pre><code>{\n    \"comment\": \"Comentario\",\n    \"rating\": 3,\n}\n</code></pre> De todas formas, lo mas recomednable es hacer un DELETE y volver a crear la rese\u00f1a.</p> DELETE <ul> <li>Descripci\u00f3n: Elimina una rese\u00f1a espec\u00edfica.</li> <li>Requiere autenticaci\u00f3n: S\u00ed</li> <li>Requiere ser owner: S\u00ed</li> </ul> <p>Enviar la solicitud con el metodo en la cabecera bastara para eliminar la publicacion.</p>"},{"location":"api/#argy_reviews.api.views.reviews_list","title":"<code>reviews_list(request, post_pk)</code>","text":"<p>List all reviews for a specific post or create a new review for that post.</p> Source code in <code>argy_reviews\\api\\views.py</code> <pre><code>@api_view(['GET', 'POST'])\n@authentication_classes([CsrfExemptSessionAuthentication, JWTAuthentication]) \n@permission_classes([AllowAny])\ndef reviews_list(request, post_pk):\n    \"\"\"\n    List all reviews for a specific post or create a new review for that post.\n    \"\"\"\n    try:\n        # post = Post.objects.filter(verification_state=get_post_state_id('verified')).get(pk=post_pk) \n        post = Post.objects.get(pk=post_pk)\n    except Post.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n\n    if request.method == 'GET':\n        reviews = Review.objects.filter(post=post)\n        serializer = ReviewSerializer(reviews, many=True)\n        return Response(serializer.data)\n\n    elif request.method == 'POST':\n        if not request.user.is_authenticated:\n            return Response(status=status.HTTP_401_UNAUTHORIZED)\n\n        if Review.objects.filter(post=post, owner=request.user).exists():\n            return Response({\"error\": \"Ya has rese\u00f1ado esta publicacion. Por favor edita o elimina tu rese\u00f1a existente.\"}, status=status.HTTP_400_BAD_REQUEST)\n\n        serializer = ReviewSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save(owner=request.user, post=post)\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n</code></pre>"},{"location":"api/#argy_reviews.api.views.review_detail","title":"<code>review_detail(request, post_pk, review_pk)</code>","text":"<p>Retrieve, update or delete a review instance.</p> Source code in <code>argy_reviews\\api\\views.py</code> <pre><code>@api_view(['GET', 'PUT', 'DELETE'])\n@authentication_classes([CsrfExemptSessionAuthentication, JWTAuthentication])  \n@permission_classes([AllowAny])\ndef review_detail(request, post_pk, review_pk):\n    \"\"\"\n    Retrieve, update or delete a review instance.\n    \"\"\"\n    try:\n        review = Review.objects.get(pk=review_pk, post_id=post_pk)\n    except Review.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n\n    if request.method == 'GET':\n        serializer = ReviewSerializer(review)\n        return Response(serializer.data)\n\n    elif request.method == 'PUT':\n        if not request.user.is_authenticated:\n            return Response(status=status.HTTP_401_UNAUTHORIZED)\n\n        if review.owner != request.user:\n            return Response(status=status.HTTP_403_FORBIDDEN)\n\n        serializer = ReviewSerializer(review, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    elif request.method == 'DELETE':\n        if review.owner != request.user:\n            return Response(status=status.HTTP_403_FORBIDDEN)\n\n        if not request.user.is_authenticated:\n            return Response(status=status.HTTP_401_UNAUTHORIZED)\n\n        review.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n</code></pre>"},{"location":"api/#imagenes","title":"Imagenes","text":"GET <ul> <li>Descripcion Lista todas las imaagenes.</li> <li>Requiere autenticaci\u00f3n: No</li> </ul> <p>Este <code>json</code> es un ejemplo de lo que se obtendra como <code>response</code> al llamar alguno de los endpoints relacionados a las imagenes. <pre><code>[\n    {\n        \"id\": 3,\n        \"image\": \"/media/images/descarga_1.jpg\",\n        \"post\": 3\n    }\n]\n</code></pre></p> POST <ul> <li>Descripci\u00f3n: Crea una nueva rese\u00f1a.</li> <li>Requiere autenticaci\u00f3n: S\u00ed</li> </ul> <p>Para poder subir una imagen se deber enviar un <code>form-data</code>, ya que se trata de un archivo. En este deben estar los campos <code>image</code> y <code>post</code>. El campo <code>image</code> debe contener un archivo.</p>"},{"location":"api/#argy_reviews.api.views.image_upload","title":"<code>image_upload(request, post_pk)</code>","text":"<p>Upload an image for a post.</p> Source code in <code>argy_reviews\\api\\views.py</code> <pre><code>@api_view(['GET','POST','PUT'])\n@authentication_classes([CsrfExemptSessionAuthentication, JWTAuthentication])  \n@permission_classes([AllowAny])\ndef image_upload(request, post_pk):\n    \"\"\"\n    Upload an image for a post.\n    \"\"\"\n    try:\n        post = Post.objects.get(pk=post_pk)\n    except Post.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n\n    if request.method == 'GET':\n        images = PostImage.objects.filter(post=post)\n        serializer = ImageSerializer(images, many=True)\n        return Response(serializer.data)\n\n    elif request.method == 'POST':\n        if not request.user.is_authenticated:\n            return Response(status=status.HTTP_401_UNAUTHORIZED)\n\n        serializer = ImageSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    elif request.method == 'PUT':\n        if not request.user.is_authenticated:\n            return Response(status=status.HTTP_401_UNAUTHORIZED)\n\n        if post.owner != request.user:\n            return Response(status=status.HTTP_403_FORBIDDEN)\n\n        # Eliminar todas las im\u00e1genes actuales del post\n        PostImage.objects.filter(post=post).delete()\n\n        # Agregar las nuevas im\u00e1genes\n        serializer = ImageSerializer(data=request.data, many=True)\n        if serializer.is_valid():\n            serializer.save(post=post)\n            return Response(serializer.data, status=status.HTTP_200_OK)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n</code></pre>"}]}